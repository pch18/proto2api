#!/usr/bin/env node
"use strict";
const { Command } = require("commander"); // include commander in git clone of commander repo
const path = require("path");
const fse = require("fs-extra");
const { Glob } = require("glob");
const pkg = require("../package.json");
const resolve = (p) => path.resolve(p);
const program = new Command();

program
  .version(pkg.version)
  .option("--debug", "load code with ts-node for debug")
  .requiredOption(
    "-d, --dir <type>",
    "directory address of Protocol Buffers. eq: /path/pbdir or /path/hello.proto"
  )
  .requiredOption("-o, --output <type>", "Output api path")
  .option(
    "--protoDir <type>",
    "The root directory for loading proto files. By default, the directory folder named proto3|proto2 will be found. If it still does not exist, it will try to find it automatically, but the correctness is not guaranteed.",
    ""
  )
  .option("--apiName <type>", "apiName", "webapi")
  .option("--apiPath <type>", "apiPath", "~/utils/api")
  .option("--prefix <type>", "api prefix path", "")
  .option(
    "--depPath <type>",
    "the address of the external dependency proto library. eq: /common/proto3",
    ""
  )
  .option(
    "--ignore [ignore...]",
    "ignore unnecessary generated pb files",
    "google|swagger"
  )
  .description(pkg.description)
  .action(async (opt) => {
    const dirPath = resolve(opt.dir);

    let files = [];
    if (dirPath.endsWith(".proto")) {
      files = await getPathsDir(dirPath);
    } else {
      files = await getPathsDir(dirPath + "/**/*.proto");
    }
    if (files.length === 0) {
      console.error(`The address ${dirPath} does not exist`);
      return process.exit(1);
    }

    let protoDir = opt.protoDir;
    if (!opt.protoDir) {
      const result = dirPath.match(/(.*proto[2|3]?)\//);
      protoDir = result ? result[1] : ".";
    }
    protoDir = resolve(protoDir)

    const devMode = opt.debug;

    const output = resolve(opt.output);

    let ignore;
    if (typeof opt.ignore === "string") {
      ignore = new RegExp(opt.ignore);
    } else {
      ignore =
        opt.ignore && opt.ignore.join ? new RegExp(opt.ignore.join("|")) : null;
    }

    const options = {
      files,
      output: output.endsWith("/") ? output : output + "/",
      apiName: opt.apiName,
      apiPath: opt.apiPath,
      apiPrefixPath: opt.prefix,
      protoDir: protoDir,
      depPath: opt.depPath,
      ignore,
      devMode,
    };

    if (devMode) {
      require("ts-node").register({
        project: `${__dirname}/../tsconfig.spec.json`,
      });
      const { main } = require(`${__dirname}/../src/index`);
      main(options);
      const isInspect = process.execArgv.some(arg => arg.startsWith('--inspect'));
      if (isInspect) {
        setInterval(() => { }, 100000000)
      }
    } else {
      const { main } = require(`${__dirname}/../dist/index`);
      main(options);
    }
  });

program.parse();

function getPathsDir(dir) {
  return new Promise((resolve, reject) => {
    new Glob(dir, { mark: true, sync: false }, (err, files) => {
      if (err) {
        console.error("Glob error: ", err);
        return reject(err);
      }
      resolve(files);
    });
  });
}
